# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-wifigpu
#
# SPDX-License-Identifier: GPL-3.0-or-later
#


###############################################################################
# CUDA Kernels to be compiled with NVCC
###############################################################################
find_package(CUDA)

set(CUDA_BLOCK_SOURCES )
if (CUDA_FOUND)
    set(CUDA_BLOCK_SOURCES
        presync_impl.cc
        sync_short_impl.cc
        sync_long_impl.cc
        frame_equalizer_impl.cc)

    add_library(gnuradio-wifigpu-cu STATIC 
        freq_correction.cu
        multiply.cu
        multiply_const.cu
        presync.cu
        frame_equalizer.cu
        )
    set_target_properties(gnuradio-wifigpu-cu PROPERTIES 
        POSITION_INDEPENDENT_CODE ON
        CUDA_VISIBILITY_PRESET "hidden"
        CUDA_SEPARABLE_COMPILATION ON
    )
    # Compile for supported archs; CMake workaround, see: https://stackoverflow.com/a/54505975/73878
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_60,code=sm_60>")
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_61,code=sm_61>")
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_62,code=sm_62>")
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_70,code=sm_70>")
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_72,code=sm_72>")
    target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_75,code=sm_75>")
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_80,code=sm_80>")
    # target_compile_options(gnuradio-wifigpu-cu PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-gencode arch=compute_86,code=sm_86>")
endif()

###############################################################################
# gr-cuda_buffer is required for the CUDA blocks
###############################################################################
find_package(cuda_buffer REQUIRED)
check_include_file("xmmintrin.h" SSE2_SUPPORTED)

if(SSE2_SUPPORTED)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
    add_definitions(-DIEEE80211_MSSE2)
endif(SSE2_SUPPORTED)

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

list(APPEND wifigpu_sources
    ${CUDA_BLOCK_SOURCES}
    equalizer/base.cc
    equalizer/comb.cc
    equalizer/ls.cc
    equalizer/lms.cc
    equalizer/sta.cc
    utils.cc
    constellations_impl.cc
    viterbi_decoder/base.cc
)

# use SSE2 optimized viterbi implementation if SSE2 is enabled
if(SSE2_SUPPORTED)
    list(APPEND wifigpu_sources
        viterbi_decoder/viterbi_decoder_x86.cc
    )
else()
    list(APPEND wifigpu_sources
        viterbi_decoder/viterbi_decoder_generic.cc
    )
endif(SSE2_SUPPORTED)

set(wifigpu_sources "${wifigpu_sources}" PARENT_SCOPE)
if(NOT wifigpu_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT wifigpu_sources)

add_library(gnuradio-wifigpu SHARED ${wifigpu_sources})
target_link_libraries(gnuradio-wifigpu PUBLIC gnuradio::gnuradio-runtime gnuradio::gnuradio-digital
    ${CUDA_CUDART_LIBRARY} 
    ${CUDA_CUFFT_LIBRARIES} 
    ${CUDA_BUFFER_LIBRARIES})
if (CUDA_FOUND)
target_link_libraries(gnuradio-wifigpu PRIVATE 
    gnuradio-wifigpu-cu
    )
endif()

target_include_directories(gnuradio-wifigpu
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    ${CUDA_INCLUDE_DIRS} 
    ${CUDA_BUFFER_INCLUDE_DIRS}
  )
set_target_properties(gnuradio-wifigpu PROPERTIES DEFINE_SYMBOL "gnuradio_wifigpu_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-wifigpu PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-wifigpu)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_wifigpu_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-wifigpu)

if(NOT test_wifigpu_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_wifigpu_sources)

foreach(qa_file ${test_wifigpu_sources})
    GR_ADD_CPP_TEST("wifigpu_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)
